{
  "C:\\Codebase\\Uni\\CloudParkingLot\\serverless.yml": {
    "versionFramework": "4.14.2",
    "servicePath": "C:\\Codebase\\Uni\\CloudParkingLot\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "runitest",
      "app": "parkinglot",
      "service": "parking-lot-service",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "us-east-1",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:UpdateItem",
              "dynamodb:Scan"
            ],
            "Resource": "arn:aws:dynamodb:us-east-1:*:table/Tickets"
          }
        ],
        "apiGateway": {
          "apiKeys": "<REDACTED>"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "EntryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/parking-lot-service-dev-entry"
              }
            },
            "ExitLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/parking-lot-service-dev-exit"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "parking-lot-service",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/parking-lot-service-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/parking-lot-service-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:Scan"
                          ],
                          "Resource": "arn:aws:dynamodb:us-east-1:*:table/Tickets"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "parking-lot-service",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "EntryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
                  "S3Key": "serverless/parking-lot-service/dev/1746525034944-2025-05-06T09:50:34.944Z/parking-lot-service.zip"
                },
                "Handler": "entry.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "parking-lot-service-dev-entry",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EntryLogGroup"
              ]
            },
            "ExitLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
                  "S3Key": "serverless/parking-lot-service/dev/1746525034944-2025-05-06T09:50:34.944Z/parking-lot-service.zip"
                },
                "Handler": "exit.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "parking-lot-service-dev-exit",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ExitLogGroup"
              ]
            },
            "EntryLambdaVersionm3ZtFgGTLD8r7OlZULv8LYxkDE2oH6deWkWhFqVOOtg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EntryLambdaFunction"
                },
                "CodeSha256": "gkhdv0xP7v5O3psqz35h7XtDBg9Q1Dyc9e1pNuUWC7Q="
              }
            },
            "ExitLambdaVersionAZOQ3UV0gvrOjj2jpKsR1UWJBBNrt1dP5nc8tpj1Q": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ExitLambdaFunction"
                },
                "CodeSha256": "gkhdv0xP7v5O3psqz35h7XtDBg9Q1Dyc9e1pNuUWC7Q="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-parking-lot-service",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceEntry": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "entry",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceExit": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "exit",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEntryPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEntry"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "EntryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "EntryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodExitPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceExit"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ExitLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ExitLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1746525017679": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodEntryPost",
                "ApiGatewayMethodExitPost"
              ]
            },
            "ApiGatewayApiKey1": "<REDACTED>",
            "ApiGatewayUsagePlan": {
              "Type": "AWS::ApiGateway::UsagePlan",
              "DependsOn": "ApiGatewayDeployment1746525017679",
              "Properties": {
                "ApiStages": [
                  {
                    "ApiId": {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "Stage": "dev"
                  }
                ],
                "Description": "Usage plan for parking-lot-service dev stage",
                "UsagePlanName": "parking-lot-service-dev"
              }
            },
            "ApiGatewayUsagePlanKey1": {
              "Type": "AWS::ApiGateway::UsagePlanKey",
              "Properties": {
                "KeyId": {
                  "Ref": "ApiGatewayApiKey1"
                },
                "KeyType": "API_KEY",
                "UsagePlanId": {
                  "Ref": "ApiGatewayUsagePlan"
                }
              }
            },
            "EntryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EntryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ExitLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ExitLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "TicketsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Tickets",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "ticketId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "ticketId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
              "Export": {
                "Name": "sls-parking-lot-service-dev-ServerlessDeploymentBucketName"
              }
            },
            "EntryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EntryLambdaVersionm3ZtFgGTLD8r7OlZULv8LYxkDE2oH6deWkWhFqVOOtg"
              },
              "Export": {
                "Name": "sls-parking-lot-service-dev-EntryLambdaFunctionQualifiedArn"
              }
            },
            "ExitLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ExitLambdaVersionAZOQ3UV0gvrOjj2jpKsR1UWJBBNrt1dP5nc8tpj1Q"
              },
              "Export": {
                "Name": "sls-parking-lot-service-dev-ExitLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-parking-lot-service-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "entry": {
          "handler": "entry.handler",
          "events": [
            {
              "http": {
                "path": "entry",
                "method": "post",
                "private": true,
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "parking-lot-service-dev-entry",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "EntryLambdaVersionm3ZtFgGTLD8r7OlZULv8LYxkDE2oH6deWkWhFqVOOtg"
        },
        "exit": {
          "handler": "exit.handler",
          "events": [
            {
              "http": {
                "path": "exit",
                "method": "post",
                "private": true,
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "parking-lot-service-dev-exit",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ExitLambdaVersionAZOQ3UV0gvrOjj2jpKsR1UWJBBNrt1dP5nc8tpj1Q"
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "resources": {
        "Resources": {
          "TicketsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Tickets",
              "AttributeDefinitions": [
                {
                  "AttributeName": "ticketId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ticketId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:UpdateItem",
            "dynamodb:Scan"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:*:table/Tickets"
        }
      ],
      "apiGateway": {
        "apiKeys": "<REDACTED>"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "EntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/parking-lot-service-dev-entry"
            }
          },
          "ExitLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/parking-lot-service-dev-exit"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "parking-lot-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/parking-lot-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/parking-lot-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:Scan"
                        ],
                        "Resource": "arn:aws:dynamodb:us-east-1:*:table/Tickets"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "parking-lot-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
                "S3Key": "serverless/parking-lot-service/dev/1746525034944-2025-05-06T09:50:34.944Z/parking-lot-service.zip"
              },
              "Handler": "entry.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "parking-lot-service-dev-entry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EntryLogGroup"
            ]
          },
          "ExitLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
                "S3Key": "serverless/parking-lot-service/dev/1746525034944-2025-05-06T09:50:34.944Z/parking-lot-service.zip"
              },
              "Handler": "exit.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "parking-lot-service-dev-exit",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExitLogGroup"
            ]
          },
          "EntryLambdaVersionm3ZtFgGTLD8r7OlZULv8LYxkDE2oH6deWkWhFqVOOtg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EntryLambdaFunction"
              },
              "CodeSha256": "gkhdv0xP7v5O3psqz35h7XtDBg9Q1Dyc9e1pNuUWC7Q="
            }
          },
          "ExitLambdaVersionAZOQ3UV0gvrOjj2jpKsR1UWJBBNrt1dP5nc8tpj1Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExitLambdaFunction"
              },
              "CodeSha256": "gkhdv0xP7v5O3psqz35h7XtDBg9Q1Dyc9e1pNuUWC7Q="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-parking-lot-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceEntry": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "entry",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "exit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEntryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntry"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "EntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExitPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExit"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExitLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExitLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1746525017679": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodEntryPost",
              "ApiGatewayMethodExitPost"
            ]
          },
          "ApiGatewayApiKey1": "<REDACTED>",
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1746525017679",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "dev"
                }
              ],
              "Description": "Usage plan for parking-lot-service dev stage",
              "UsagePlanName": "parking-lot-service-dev"
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          },
          "EntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExitLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExitLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TicketsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Tickets",
              "AttributeDefinitions": [
                {
                  "AttributeName": "ticketId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ticketId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
            "Export": {
              "Name": "sls-parking-lot-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "EntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EntryLambdaVersionm3ZtFgGTLD8r7OlZULv8LYxkDE2oH6deWkWhFqVOOtg"
            },
            "Export": {
              "Name": "sls-parking-lot-service-dev-EntryLambdaFunctionQualifiedArn"
            }
          },
          "ExitLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExitLambdaVersionAZOQ3UV0gvrOjj2jpKsR1UWJBBNrt1dP5nc8tpj1Q"
            },
            "Export": {
              "Name": "sls-parking-lot-service-dev-ExitLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-parking-lot-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "mKrMsLb39pgm1Jp53t",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "serviceRawFile": "org: runitest\r\napp: parkinglot\r\nservice: parking-lot-service\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  region: us-east-1\r\n\r\n  # IAM permissions for DynamoDB\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:PutItem\r\n        - dynamodb:GetItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:Scan\r\n      Resource:\r\n        - arn:aws:dynamodb:us-east-1:*:table/Tickets\r\n\r\n  # REST API setup with API key support\r\n  apiGateway:\r\n    apiKeys:\r\n      - name: parkingApiKey\r\n\r\nfunctions:\r\n  entry:\r\n    handler: entry.handler\r\n    events:\r\n      - http:\r\n          path: entry\r\n          method: post\r\n          private: true\r\n\r\n  exit:\r\n    handler: exit.handler\r\n    events:\r\n      - http:\r\n          path: exit\r\n          method: post\r\n          private: true\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nresources:\r\n  Resources:\r\n    TicketsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Tickets\r\n        AttributeDefinitions:\r\n          - AttributeName: ticketId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: ticketId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "2973167d-9318-411a-aff8-11665af58b05",
    "orgName": "runitest",
    "userId": "HzrpcNc0prVw1g622z",
    "userName": "runitest",
    "serviceProviderAwsAccountId": "583524027867",
    "serviceProviderAwsCfStackName": "parking-lot-service-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:583524027867:stack/parking-lot-service-dev/f8f91be0-2a54-11f0-a30b-0affcefe9fe1",
    "serviceProviderAwsCfStackCreated": "2025-05-06T08:34:49.225Z",
    "serviceProviderAwsCfStackUpdated": "2025-05-06T09:45:49.173Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "EntryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:583524027867:function:parking-lot-service-dev-entry:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-parking-lot-service-dev-EntryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExitLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:583524027867:function:parking-lot-service-dev-exit:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-parking-lot-service-dev-ExitLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://lgf93z13g1.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-parking-lot-service-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
        "ExportName": "sls-parking-lot-service-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "EntryLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/parking-lot-service-dev-entry"
          }
        },
        "ExitLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/parking-lot-service-dev-exit"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "parking-lot-service",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/parking-lot-service-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/parking-lot-service-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:Scan"
                      ],
                      "Resource": "arn:aws:dynamodb:us-east-1:*:table/Tickets"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "parking-lot-service",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "EntryLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
              "S3Key": "serverless/parking-lot-service/dev/1746525034944-2025-05-06T09:50:34.944Z/parking-lot-service.zip"
            },
            "Handler": "entry.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "parking-lot-service-dev-entry",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EntryLogGroup"
          ]
        },
        "ExitLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
              "S3Key": "serverless/parking-lot-service/dev/1746525034944-2025-05-06T09:50:34.944Z/parking-lot-service.zip"
            },
            "Handler": "exit.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "parking-lot-service-dev-exit",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ExitLogGroup"
          ]
        },
        "EntryLambdaVersionm3ZtFgGTLD8r7OlZULv8LYxkDE2oH6deWkWhFqVOOtg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EntryLambdaFunction"
            },
            "CodeSha256": "gkhdv0xP7v5O3psqz35h7XtDBg9Q1Dyc9e1pNuUWC7Q="
          }
        },
        "ExitLambdaVersionAZOQ3UV0gvrOjj2jpKsR1UWJBBNrt1dP5nc8tpj1Q": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ExitLambdaFunction"
            },
            "CodeSha256": "gkhdv0xP7v5O3psqz35h7XtDBg9Q1Dyc9e1pNuUWC7Q="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-parking-lot-service",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceEntry": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "entry",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceExit": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "exit",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodEntryPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEntry"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "EntryLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "EntryLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodExitPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceExit"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ExitLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ExitLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1746525017679": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodEntryPost",
            "ApiGatewayMethodExitPost"
          ]
        },
        "ApiGatewayApiKey1": "<REDACTED>",
        "ApiGatewayUsagePlan": {
          "Type": "AWS::ApiGateway::UsagePlan",
          "DependsOn": "ApiGatewayDeployment1746525017679",
          "Properties": {
            "ApiStages": [
              {
                "ApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "Stage": "dev"
              }
            ],
            "Description": "Usage plan for parking-lot-service dev stage",
            "UsagePlanName": "parking-lot-service-dev"
          }
        },
        "ApiGatewayUsagePlanKey1": {
          "Type": "AWS::ApiGateway::UsagePlanKey",
          "Properties": {
            "KeyId": {
              "Ref": "ApiGatewayApiKey1"
            },
            "KeyType": "API_KEY",
            "UsagePlanId": {
              "Ref": "ApiGatewayUsagePlan"
            }
          }
        },
        "EntryLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EntryLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "ExitLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ExitLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "TicketsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Tickets",
            "AttributeDefinitions": [
              {
                "AttributeName": "ticketId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "ticketId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-4e29a4fc-e182",
          "Export": {
            "Name": "sls-parking-lot-service-dev-ServerlessDeploymentBucketName"
          }
        },
        "EntryLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EntryLambdaVersionm3ZtFgGTLD8r7OlZULv8LYxkDE2oH6deWkWhFqVOOtg"
          },
          "Export": {
            "Name": "sls-parking-lot-service-dev-EntryLambdaFunctionQualifiedArn"
          }
        },
        "ExitLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ExitLambdaVersionAZOQ3UV0gvrOjj2jpKsR1UWJBBNrt1dP5nc8tpj1Q"
          },
          "Export": {
            "Name": "sls-parking-lot-service-dev-ExitLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-parking-lot-service-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}